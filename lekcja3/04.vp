#version 330

in vec4 vVertex;
in vec3 vNormal; 

uniform mat4x4 MVPMatrix;
uniform mat3x3 normalMatrix;
uniform mat4x4 MVMatrix;
uniform vec3 ambientLight;

struct pointLight {
    vec3  position; //in eye space !!
    vec3  color;
    float attenuation0;
    float attenuation1;
    float attenuation2;
    float angle;
};
uniform pointLight light1;

struct materialProperties {
    vec3  ambientColor;
    vec3  diffuseColor;
    vec3  specularColor;
    float specularExponent;
};
uniform materialProperties material;

out vec4 vVaryingColor;

void main() {
    vec4 positionInEyeSpace4=MVMatrix*vVertex;
    vec3 positionInEyeSpace3=positionInEyeSpace4.xyz/positionInEyeSpace4.w;
    vec3 normalInEyeSpace=normalize(normalMatrix*vNormal);
    gl_Position = MVPMatrix*vVertex;
    vVaryingColor.rgb =material.ambientColor;
    vVaryingColor.a=1.0;
    vec3 toLight=light1.position-positionInEyeSpace3;
    float r=length(toLight);
    float intensity=1.0/(light1.attenuation0+light1.attenuation1*r+light1.attenuation2*r);
    vec3 lightDirection=normalize(toLight);
    float diffuse=max(0.0,dot(normalInEyeSpace,lightDirection));
    vVaryingColor.rgb +=intensity*diffuse*material.diffuseColor*light1.color;

    if(diffuse>0.0)
    {
        vec3 halfvector=normalize(lightDirection-normalize(positionInEyeSpace3));
        float specular=max(0.0,dot(halfvector,normalInEyeSpace));	        
        float fSpecular=pow(specular,material.specularExponent);
        vVaryingColor.rgb += intensity*fSpecular*light1.color*material.specularColor;
    }

}